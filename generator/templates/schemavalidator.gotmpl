{{ define "primitivefieldvalidator" }}
  {{ if .Required }}
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .MinLength }}
  if err := validate.MinLength({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, string({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.MinLength }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .MaxLength }}
  if err := validate.MaxLength({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, string({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.MaxLength }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .Pattern }}
  if err := validate.Pattern({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, string({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), `{{.Pattern }}`); err != nil {
    return err
  }
  {{ end }}
  {{ if .Minimum }}
  if err := validate.Minimum{{ if eq .SwaggerType "integer" }}Int{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if eq .SwaggerType "integer" }}int{{ else }}float{{ end }}64({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.Minimum }}, {{.ExclusiveMinimum }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .Maximum }}
  if err := validate.Maximum{{ if eq .SwaggerType "integer" }}Int{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if eq .SwaggerType "integer" }}int{{ else }}float{{ end }}64({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.Maximum }}, {{.ExclusiveMaximum }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .MultipleOf }}
  if err := validate.MultipleOf({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, float64({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.MultipleOf }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .Enum }}
    // primitive enum
    {{- if .IsNullable }}
  if {{ .ValueExpression }} != nil {
    {{- end }}
  if err := {{.ReceiverName }}.validate{{ pascalize .GenEnum.EnumSliceVar }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if .IsNullable }}*{{ end }}{{.ValueExpression }}); err != nil {
    return err
  }
    {{- if .IsNullable }}
    }
    {{- end }}
  {{ end }}
  {{ if .IsCustomFormatter }}{{/* the .IsStream case (ioReadCloser) is already excluded, since it does not resolve as primitive */}}
    {{ template "validationCustomformat" . }}
  {{ end }}
{{ end }}

{{define "slicevalidator" }}
  {{ if .Required }}
    if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .ValueExpression }}); err != nil {
      return err
    }
  {{ end }}
  {{ if or .MinItems .MaxItems }}
    {{ .IndexVar }}{{ pascalize .Name }}Size := int64(len({{.ValueExpression }}))
  {{ end }}
  {{ if .MinItems }}
    if err := validate.MinItems({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .IndexVar }}{{ pascalize .Name }}Size, {{.MinItems }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .MaxItems }}
    if err := validate.MaxItems({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .IndexVar }}{{ pascalize .Name }}Size, {{.MaxItems }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .UniqueItems }}
    if err := validate.UniqueItems({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .Enum }}{{/* enum as a slice validation */}}
    // enum for slice
    if err := {{.ReceiverName }}.validate{{ pascalize .GenEnum.EnumSliceVar }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .Items }}
    {{- if and (or .Items.Required .Items.HasValidations .Items.IsBaseType .Items.IsAliased) (not .Items.IsInterface) (not .Items.IsStream) }}
      for {{.IndexVar }} := 0; {{.IndexVar }} < len({{.ValueExpression }}); {{.IndexVar }}++ {
      {{- with .Items }}
        {{- if and .IsNullable (not .Required) (not .IsMapNullOverride) }}
          if swag.IsZero({{ .ValueExpression }}) { // not required
            continue
          }
        {{- end }}
        {{ template "propertyvalidator" . }}
      {{- end }}
      }
    {{- end }}
  {{- else }}
    {{- if or .IsAliased (ne .ValueExpression .ReceiverName) }}{{/* prevents generated code to call itself: this is reserved for aliased types */}}
      {{- if and .IsNullable (not .IsMapNullOverride) }}
    if {{ .ValueExpression }} != nil {
      {{- end }}
      if err := {{.ValueExpression }}.Validate(formats); err != nil {
        if ve, ok := err.(*errors.Validation); ok {
          return ve.ValidateName({{ if .Path }}{{ .Path }}{{ else }}""{{ end }})
        }
        return err
      }
      {{- if and .IsNullable (not .IsMapNullOverride) }}
    }
      {{- end }}
    {{- end }}
  {{- end }}
{{ end }}

{{ define "mapvalidator" }}{{/* validates additionalProperties */}}
  {{ if .HasAdditionalProperties }}
    {{- if  .AdditionalProperties.HasValidations }}
    for {{ .AdditionalProperties.KeyVar }} := range {{ .ValueExpression }} {
      {{- with .AdditionalProperties }}
        {{- if and (not .Required) .IsNullable }}{{/* skip when nul type is accepted */}}
      if swag.IsZero({{ .ValueExpression }}) { // not required
        continue
      }
        {{- else if and (.Required) (not .IsArray) }}{{/* Required slice is processed below */}}
      if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
        return err
      }
        {{- end }}
        {{- if .IsPrimitive }}
          {{- if .IsAliased }}
            {{- if not .IsAnonymous }}
      if val, ok := {{ .ValueExpression }}; ok {
              {{- if and .IsNullable (not .IsMapNullOverride) }}
        if val != nil {
              {{- end }}
          if err := val.Validate(formats); err != nil {
              return err
          }
              {{- if and .IsNullable (not .IsMapNullOverride) }}
        }
              {{- end }}
      }
            {{- else }}{{/* validation of anonymous objects */}}
              {{ range .AllOf }}
                {{ range .Properties }}
                  {{ template "propertyvalidator" . }}
                {{ end }}
              {{- end }}
              {{ range .Properties }}
                {{ template "propertyvalidator" . }}
              {{ end }}
            {{- end }}
            {{ if and .IsTuple .AdditionalItems }}
      // TODO: validating additional items should go here, if you see this raise an issue
      // at https://github.com/go-swagger/go-swagger/issues
            {{ end }}
          {{ else }}
            {{ template "primitivefieldvalidator" . }}
          {{ end }}
        {{- else if and .IsCustomFormatter (or .HasValidations .Required) }}{{/* custom format not captured as primitive */}}
          {{- if .Required }}
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
          {{- end }}
          {{- if not .IsStream }}{{/* TODO: IsStream and CustomFormattershould be mutually exclusive in type resolver */}}
            {{ template "validationCustomformat" . }}
          {{- end }}
        {{ else if .IsArray }}
          {{ template "slicevalidator" . }}
        {{ else if .IsMap }}
          {{ template "mapvalidator" . }}
          {{ if .Enum }}{{/* TODO(FRED): check for nullability */}}
      if err := {{ .ReceiverName }}.validate{{ pascalize .GenEnum.EnumSliceVar }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .ValueExpression }}); err != nil {
        return err
      }
          {{- end }}
        {{ else if or .IsComplexObject .IsTuple .IsAdditionalProperties .IsAliased }}
          {{- if not .IsAnonymous }}
    if val, ok := {{ .ValueExpression }}; ok {
            {{- if and .IsNullable (not .IsMapNullOverride) }}
      if val != nil {
            {{- end }}
          if err := val.Validate(formats); err != nil {
              return err
          }
            {{- if and .IsNullable (not .IsMapNullOverride) }}
      }
            {{- end }}
    }
          {{- else }}
            {{ range .AllOf }}
              {{ range .Properties }}
                {{ template "propertyvalidator" . }}
              {{ end }}
            {{- end }}
            {{ range .Properties }}
              {{ template "propertyvalidator" . }}
            {{- end }}
          {{- end }}
          {{- if and .IsTuple .AdditionalItems }}
      // TODO: validating additional items should go here, if you see this raise an issue
      // at https://github.com/go-swagger/go-swagger/issues
          {{- end }}
        {{- end }}
    }
      {{ end }}
    {{ end }}
    {{- if .Enum }}{{/* TODO(FRED): check for nullability */}}
    // enum for map
    if err := {{ .ReceiverName }}.validate{{ pascalize .GenEnum.EnumSliceVar }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .ValueExpression }}); err != nil {
      return err
    }
    {{- end }}
  {{- else if .IsAliased }}
    {{- if and .Required .IsInterface }}
      if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
        return err
      }
    {{- end }}
    {{- if and .IsMap .HasValidations }}{{/* validation of aliased maps but does not know about AdditionalProperties: e.g. it comes from a $ref */}}
      {{- if not .IsAnonymous }}
        {{- if $.IsMap }}{{/* we come from a map range */}}
      if val, ok := {{ .ValueExpression }}; ok {
        {{- end }}
        {{- if and .IsNullable (not .IsMapNullOverride) }}
          {{- if $.IsMap }}
        if val != nil {
          {{- else }}
        if {{ .ValueExpression }} != nil {
          {{- end }}
        {{- end }}
          if err := {{ if $.IsMap }}val{{ else }}{{ .ValueExpression }}{{ end }}.Validate(formats); err != nil {
              return err
          }
        {{- if and .IsNullable (not .IsMapNullOverride) }}
        }
        {{- end }}
        {{- if or $.IsMap }}
     }
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{ end }}

{{define "objectvalidator" }}
  {{- if not .IsAnonymous }}
    {{- if and .Required .IsNullable }}
      if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
        return err
      }
    {{ end }}
    {{- if or .IsAliased (ne .ValueExpression .ReceiverName) }}{{/* prevents generated code to call itself: case of aliased types */}}
      {{- if and .IsNullable (not .IsMapNullOverride) }}
      if {{ .ValueExpression }} != nil {
      {{- end }}
      if err := {{.ValueExpression }}.Validate(formats); err != nil {
        if ve, ok := err.(*errors.Validation); ok {
          return ve.ValidateName({{ if .Path }}{{ .Path }}{{ else }}""{{ end }})
        }
        return err
      }
      {{- if and .IsNullable (not .IsMapNullOverride) }}
    }
      {{- end }}
    {{- end }}
  {{- else }}
    {{ range .AllOf }}
      {{ range .Properties }}
        {{ template "propertyvalidator" . }}
      {{ end }}
    {{ end }}
    {{ range .Properties }}
      {{ template "propertyvalidator" . }}
    {{ end }}
  {{- end }}
  {{- if and .IsTuple .AdditionalItems }}
    // TODO: validating additional items should go here, if you see this raise an issue
    // at https://github.com/go-swagger/go-swagger/issues
  {{- end }}
{{ end }}

{{define "propertyvalidator" }}
  {{- if .IsPrimitive }}
    {{- if .IsAliased }}
      {{ template "objectvalidator" . }}
    {{- else }}
      {{ template "primitivefieldvalidator" . }}
    {{- end }}
    {{- else if and .IsCustomFormatter (or .HasValidations .Required) }}{{/* custom format not captured as primitive */}}
    {{- if .Required }}
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
    {{- end }}
    {{- if not .IsStream }}
      {{ template "validationCustomformat" . }}
    {{- end }}
  {{- else if .IsArray }}
    {{ template "slicevalidator" . }}
    {{- else if and .IsMap (or (not .IsAliased) (and .IsAliased .IsInterface)) }}{{/* except for interface, the renderinf for aliased maps is performed by objectvalidator */}}
    {{ template "mapvalidator" . }}
  {{- else if or .IsComplexObject .IsTuple .IsAdditionalProperties .IsAliased }}
    {{ template "objectvalidator" . }}
  {{- end }}
{{ end }}

{{ define "fieldvalidator"}}
  {{- if .IsPrimitive }}
    {{ template "primitivefieldvalidator" . }}
  {{- else if and .IsCustomFormatter (or .HasValidations .Required) }}{{/* custom format not captured as primitive */}}
    {{- if .Required }}
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
    {{- end }}
    {{- if not .IsStream }}
      {{ template "validationCustomformat" . }}
    {{- end }}
  {{- else if .IsArray }}
    {{ template "slicevalidator" . }}
  {{- else if .IsMap }}
    {{ template "mapvalidator" . }}
  {{- end }}
{{ end }}

{{define "schemavalidator" }}
  {{- if .Enum }}
    // enum for schema {{ .Name }}
  {{- end }}
  {{ template "enum" . }}
// Validate validates this {{ humanize .Name }}{{/* main Validate() method */}}
func ({{.ReceiverName }} {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ if .Discriminates }}{{ camelize .Name }}{{ else if .IsExported }}{{ pascalize .Name }}{{ else }}{{ .Name }}{{ end }}) Validate(formats strfmt.Registry) error {
  var res []error

  {{ if .Enum -}}{{/* TODO(FRED): copy as fieldvalidator? */}}
    {{- if and (not .IsPrimitive) (not .IsMap) (not .IsArray) }}{{- /* validation for primitives, maps and slices is already carried on*/ -}}
      {{- if .IsNullable }}{{/* TODO: check IsMapNullOverride */}}
      if {{ .ReceiverName }} != nil {
      {{- end }}
    // value enum for this {{ humanize .Name }}
    if err := {{ .ReceiverName }}.validate{{ pascalize .GenEnum.EnumSliceVar }}("", "body", {{- if or .IsNullable .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ .ReceiverName }}); err != nil {
      res = append(res, err)
    }
      {{- if .IsNullable }}
      }
      {{- end }}
    {{- end -}}
  {{ end }}
  {{ range .AllOf }}
    {{- if not .Properties }}
      // validation for a type composition with {{ .GoType }}
    {{- end }}
    {{- if and (or .IsInterface .IsAnonymous .IsBaseType) (or .Required .HasValidations) }}
      {{ template "fieldvalidator" . }}

      {{ range .Properties }}
        {{- if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
          if err := {{.ReceiverName }}.validate{{ pascalize .Name }}(formats); err != nil {
            res = append(res, err)
          }
        {{- end }}
      {{- end }}
      {{- if and .HasAdditionalProperties (not .IsMap) }}{{/* validates additionalProperties in an object which is not itself a map */}}
        {{ template "mapvalidator" . }}
      {{- end }}
      {{- if and .IsTuple .AdditionalItems }}
      if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}Items(formats); err != nil {
        res = append(res, err)
      }
      {{- end }}
    {{- else if (or .Required .HasValidations) }}
      if err := {{ .ReceiverName }}.{{ pascalize (dropPackage .GoType) }}.Validate(formats); err != nil {
        res = append(res, err)
      }
    {{- end }}
  {{- end }}
  {{ template "fieldvalidator" . }}
  {{ range .Properties }}
    {{ if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
      if err := {{.ReceiverName }}.validate{{ pascalize .Name }}(formats); err != nil {
        res = append(res, err)
      }
    {{ end }}
  {{ end }}
  {{- if and .HasAdditionalProperties (not .IsMap) }}{{/* validates additionalProperties in an object which is not itself a map */}}
    {{ template "mapvalidator" . }}
  {{- end }}
  {{- if and .IsTuple .AdditionalItems }}{{/* validates additionalItems in a tuple */}}
    if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}Items(formats); err != nil {
      res = append(res, err)
    }
  {{- end }}
  {{- if eq 1 0 }}{{/* TODO FRED what is this for? */}}
    {{- if and .Enum (not .IsPrimitive) (not .IsMap) }}
    // value enum
    if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}Enum("", "body", {{ .ReceiverName }}); err != nil {
      res = append(res, err)
    }
    {{- end }}
  {{- end }}

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}
  {{ range .Properties }}{{/* property validation methods */}}
    {{- if or .Required .HasValidations }}
      {{- if .Enum }}
        // enum for property {{ .Name }}
      {{- end }}
      {{ template "enum" . }}

      {{ if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
func ({{.ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}(formats strfmt.Registry) error {
        {{ if not .Required }}
  if swag.IsZero({{ .ValueExpression }}) { // not required
    return nil
  }
        {{ end }}
        {{- if and $.IsTuple .IsMap .Required }}
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
        {{- end }}
        {{ template "propertyvalidator" . }}

  return nil
}
      {{- end }}
    {{- end }}
  {{- end }}
  {{ range .AllOf }}
    {{ range .Properties }}
      {{ if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
        {{- if .Enum }}
        // enum for allOf properties
        {{- end }}
        {{ template "enum" . }}

// validate{{ pascalize .Name }} validates allOf property {{ .Name }}
func ({{.ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}(formats strfmt.Registry) error {
        {{- if not .Required }}
  if swag.IsZero({{ .ValueExpression }}) { // not required
    return nil
  }
        {{- end }}
        {{template "propertyvalidator" . }}

  return nil
}
      {{- end }}
    {{- end }}
  {{ end }}
  {{- if .HasAdditionalItems }}
// validate{{ pascalize .Name }}Items validates AdditionalItems for {{ .Name }}
func ({{.ReceiverName }} *{{ pascalize .Name }}) validate{{ pascalize .Name }}Items(formats strfmt.Registry) error {
    {{- if or .AdditionalItems.Required .AdditionalItems.HasValidations }}
  for {{ .IndexVar }} := range {{ .ValueExpression }}.{{ pascalize .Name }}Items {
      {{template "propertyvalidator" .AdditionalItems }}
  }
    {{- end }}
  return nil
}
  {{- end }}
{{ end }}
