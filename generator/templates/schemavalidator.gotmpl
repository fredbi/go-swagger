{{ define "primitivefieldvalidator" }}
  {{ if .Required }}{{/* TODO: for tuples, requires a special process */}}
  // DEBUG: $.IsTuple: {{ $.IsTuple }}
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .MinLength }}
  if err := validate.MinLength({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, string({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.MinLength }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .MaxLength }}
  if err := validate.MaxLength({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, string({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.MaxLength }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .Pattern }}
  if err := validate.Pattern({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, string({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), `{{.Pattern }}`); err != nil {
    return err
  }
  {{ end }}
  {{ if .Minimum }}
  if err := validate.Minimum{{ if eq .SwaggerType "integer" }}Int{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if eq .SwaggerType "integer" }}int{{ else }}float{{ end }}64({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.Minimum }}, {{.ExclusiveMinimum }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .Maximum }}
  if err := validate.Maximum{{ if eq .SwaggerType "integer" }}Int{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if eq .SwaggerType "integer" }}int{{ else }}float{{ end }}64({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.Maximum }}, {{.ExclusiveMaximum }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .MultipleOf }}
  if err := validate.MultipleOf({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, float64({{ if .IsNullable }}*{{ end }}{{.ValueExpression }}), {{.MultipleOf }}); err != nil {
    return err
  }
  {{ end }}
  {{ if .Enum }}
  // value enum
  if err := {{.ReceiverName }}.validate{{ pascalize .Name }}{{ pascalize .Suffix }}Enum({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if .IsNullable }}*{{ end }}{{.ValueExpression }}); err != nil {
    return err
  }
  {{ end }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
  {{ if .IsCustomFormatter }}{{/* the .IsStream case (ioReadCloser) is already excluded, since it does not resolve as primitive */}}
=======
  {{ if .IsCustomFormatter }}{{/* the .IsStream case (ioReadCloser) is excluded, since it does not resolve as primitive */}}
>>>>>>> Temp work
    {{ template "validationCustomformat" . }}
  {{ end }}
{{ end }}

{{define "slicevalidator" }}
  {{ if .Required }}
    // DEBUG: $.IsTuple: {{ $.IsTuple }}
    if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .ValueExpression }}); err != nil {
      return err
    }
  {{ end }}
  {{ if or .MinItems .MaxItems }}
    {{ .IndexVar }}{{ pascalize .Name }}Size := int64(len({{.ValueExpression }}))
  {{ end }}
  {{ if .MinItems }}
    if err := validate.MinItems({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .IndexVar }}{{ pascalize .Name }}Size, {{.MinItems }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .MaxItems }}
    if err := validate.MaxItems({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .IndexVar }}{{ pascalize .Name }}Size, {{.MaxItems }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .UniqueItems }}
    if err := validate.UniqueItems({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .Enum }}
    // for slice
    if err := {{.ReceiverName }}.validate{{ pascalize .Name }}Enum({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
      return err
    }
  {{ end }}
  {{ if .Items }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======
    // DEBUG: items validation
    // DEBUG: IsMap: {{ .IsMap }}
    // DEBUG: IsAliased: {{ .IsAliased }}
    // DEBUG: IsBaseType: {{ .IsBaseType }}
    // DEBUG: HasBaseType: {{ .HasBaseType }}
    // DEBUG: IsSubType: {{ .IsSubType }}
    // DEBUG: .Items.IsMapNullOverride: {{ .Items.IsMapNullOverride }}
    // DEBUG: .Items.IsAliased: {{ .Items.IsAliased }}
    // DEBUG: .Items.IsNullable: {{ .Items.IsNullable }}
    // DEBUG: .Items.HasValidations: {{ .Items.HasValidations }}
    // DEBUG: .Items.IsBaseType: {{ .Items.IsBaseType }}
    // DEBUG: .Items.HasBaseType: {{ .Items.HasBaseType }}
    // DEBUG: .Items.IsArray: {{ .Items.IsArray }}
    // DEBUG: .GoType : {{ .GoType }}
    {{- /* TODO: same kind of override for discriminated objects */ -}}
>>>>>>> Temp work
    {{- if and (or .Items.Required .Items.HasValidations .Items.IsBaseType .Items.IsAliased) (not .Items.IsInterface) (not .Items.IsStream) }}
      for {{.IndexVar }} := 0; {{.IndexVar }} < len({{.ValueExpression }}); {{.IndexVar }}++ {
      {{- with .Items }}
        {{- if and .IsNullable (not .Required) (not .IsMapNullOverride) }}
          if swag.IsZero({{ .ValueExpression }}) { // not required
            continue
          }
        {{- end }}
        {{ template "propertyvalidator" . }}
      {{- end }}
      }
    {{- end }}
  {{- else }}
    {{- if or .IsAliased (ne .ValueExpression .ReceiverName) }}{{/* prevents generated code to call itself: this is reserved for aliased types */}}
      {{- if and .IsNullable (not .IsMapNullOverride) }}
    if {{ .ValueExpression }} != nil {
      {{- end }}
      if err := {{.ValueExpression }}.Validate(formats); err != nil {
        if ve, ok := err.(*errors.Validation); ok {
          return ve.ValidateName({{ if .Path }}{{ .Path }}{{ else }}""{{ end }})
        }
        return err
      }
      {{- if and .IsNullable (not .IsMapNullOverride) }}
    }
      {{- end }}
    {{- end }}
  {{- end }}
{{ end }}
{{ define "mapvalidator" }}{{/* validates additionalProperties */}}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
  {{ if .HasAdditionalProperties }}
=======
  // DEBUG: mapvalidator for {{ .Name }}
  // DEBUG: Required: {{ .Required }}
  // DEBUG: IsAliased: {{ .IsAliased }}
  // DEBUG: IsBaseType: {{ .IsBaseType }}
  // DEBUG: IsSubType: {{ .IsSubType }}
  {{ if .HasAdditionalProperties }}
    {{ if and .IsMap .AdditionalProperties.Required }}
    if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not .IsAnonymous }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not .IsAnonymous }}){{ end }}); err != nil {
      return err
    }
    {{ end }}
>>>>>>> Temp work
    {{- if  .AdditionalProperties.HasValidations }}
    for {{ .AdditionalProperties.KeyVar }} := range {{ .ValueExpression }} {
      {{ with .AdditionalProperties }}
        {{- if and (not .Required) .IsNullable }}{{/* skip when nul type is accepted */}}
      if swag.IsZero({{ .ValueExpression }}) { // not required
        continue
      }
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
        {{- else if and (.Required) (not .IsArray) }}{{/* Required slice is processed below */}}
      if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
        return err
      }
        {{- end }}
        {{- if .IsPrimitive }}
          {{- if .IsAliased }}
            {{- if not .IsAnonymous }}
=======
        {{ end }}
        {{- if .IsPrimitive }}
          {{- if .IsAliased }}
            {{- if not .IsAnonymous }}
      // DEBUG: IsMap: {{ .IsMap }} (1)
>>>>>>> Temp work
      if val, ok := {{ .ValueExpression }}; ok {
              {{- if and .IsNullable (not .IsMapNullOverride) }}
        if val != nil {
              {{- end }}
          if err := val.Validate(formats); err != nil {
              return err
          }
              {{- if and .IsNullable (not .IsMapNullOverride) }}
        }
              {{- end }}
      }
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
            {{- else }}{{/* validation of anonymous objects */}}
=======
            {{- else }}{{/* validation for anonymous objects */}}
>>>>>>> Temp work
              {{ range .AllOf }}
                {{ range .Properties }}
                  {{ template "propertyvalidator" . }}
                {{ end }}
              {{- end }}
              {{ range .Properties }}
                {{ template "propertyvalidator" . }}
              {{ end }}
            {{- end }}
            {{ if and .IsTuple .AdditionalItems }}
    // TODO: validating additional items should go here, if you see this raise an issue
    // at https://github.com/go-swagger/go-swagger/issues
    breakCompilation = 1
            {{ end }}
          {{ else }}
            {{ template "primitivefieldvalidator" . }}
          {{ end }}
        {{- else if and .IsCustomFormatter (or .HasValidations .Required) }}{{/* custom format not captured as primitive */}}
          {{- if .Required }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======
  // DEBUG: $.IsTuple: {{ $.IsTuple }}
>>>>>>> Temp work
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
          {{- end }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
          {{- if not .IsStream }}{{/* TODO: IsStream and CustomFormattershould be mutually exclusive in type resolver */}}
=======
          {{- if not .IsStream }}{{/* TODO(fredbi): IsStream and CustomFormattershould be mutually exclusive in type resolver */}}
>>>>>>> Temp work
            {{ template "validationCustomformat" . }}
          {{- end }}
        {{ else if .IsArray }}
          {{ template "slicevalidator" . }}
        {{ else if .IsMap }}
          {{ template "mapvalidator" .}}
          {{ if .Enum }}
      if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}ValueEnum({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .ValueExpression }}); err != nil {
        return err
      }
          {{- end }}
        {{ else if or .IsComplexObject .IsTuple .IsAdditionalProperties .IsAliased }}
          {{- if not .IsAnonymous }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======
        // DEBUG: IsMap: {{ .IsMap }} (2)
        // DEBUG: IsNullable: {{ .IsNullable }} (2)
        // DEBUG: IsPrimitive: {{ .IsPrimitive }} (2)
        // DEBUG: IsBaseType: {{ .IsBaseType }} (2)
        // DEBUG: HasBaseType: {{ .HasBaseType }} (2)
        // DEBUG: IsSubType: {{ .IsSubType }}
        // DEBUG: AdditionalProperties.IsPrimitive: {{ .IsPrimitive }} (2)
        // DEBUG: .AdditionalProperties.IsNullable: {{ .IsNullable }} (2)
        // DEBUG: .AdditionalProperties.IsAliased: {{ .IsAliased }} (2)
        // DEBUG: .AdditionalProperties.AliasedType: {{ if .IsAliased }}{{ .AliasedType }}{{end}}
        // DEBUG: .AdditionalProperties.IsMapNullOverride: {{ .IsMapNullOverride }} (2)
        // DEBUG: .AdditionalProperties.GoType: {{ .IsMap }} (2)
>>>>>>> Temp work
    if val, ok := {{ .ValueExpression }}; ok {
            {{- if and .IsNullable (not .IsMapNullOverride) }}
      if val != nil {
            {{- end }}
          if err := val.Validate(formats); err != nil {
              return err
          }
            {{- if and .IsNullable (not .IsMapNullOverride) }}
      }
            {{- end }}
    }
          {{- else }}
            {{ range .AllOf }}
              {{ range .Properties }}
                {{ template "propertyvalidator" . }}
              {{ end }}
            {{- end }}
            {{ range .Properties }}
              {{ template "propertyvalidator" . }}
            {{- end }}
          {{- end }}
          {{ if and .IsTuple .AdditionalItems }}
    // TODO: validating additional items should go here, if you see this raise an issue
    // at https://github.com/go-swagger/go-swagger/issues
    breakCompilation = 2
          {{ end }}
        {{ end }}
    }
      {{ end }}
    {{ end }}
    {{ if .Enum }}
    // from map
    if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}Enum({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ .ValueExpression }}); err != nil {
      return err
    }
    {{ end }}
  {{- else if .IsAliased }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
    {{- if and .Required .IsInterface }}
      if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
        return err
      }
    {{- end }}
    {{- if and .IsMap .HasValidations }}{{/* validation of aliased maps but does not know about AdditionalProperties: e.g. it comes from a $ref */}}
      {{- if not .IsAnonymous }}
        {{- if $.IsMap }}{{/* we come from a map range */}}
      if val, ok := {{ .ValueExpression }}; ok {  
        {{- end }}
        {{- if and .IsNullable (not .IsMapNullOverride) }}
          {{- if $.IsMap }}
        if val != nil {
          {{- else }}
        if {{ .ValueExpression }} != nil {
          {{- end }}
        {{- end }}
          if err := {{ if $.IsMap }}val{{ else }}{{ .ValueExpression }}{{ end }}.Validate(formats); err != nil {
              return err
          }
        {{- if and .IsNullable (not .IsMapNullOverride) }}
        }
        {{- end }}
        {{- if or $.IsMap }} 
     }
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{ end }}

{{define "objectvalidator" }}
  {{- if not .IsAnonymous }}
    {{- if and .Required .IsNullable }}
=======
      // DEBUG: aliased map
    {{- if and .Required .IsInterface }}
      // DEBUG: $.IsTuple: {{ $.IsTuple }}
      if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
        return err
      }
    {{- else }}{{/* TODO(fredbi): figure out if something needed here*/}}
    // DEBUG: Enum: {{ .Enum }} (1)
    {{- end }}
    {{- else }}
  {{- end }}
  // DEBUG: Enum: {{ .Enum }} (2)
{{ end }}{{/* end "mapvalidator" */}}

{{define "objectvalidator" }}
  // DEBUG: ObjectValidator for {{.Name}}
  // DEBUG: IsAliased: {{ .IsAliased }}
  // DEBUG: IsNullable: {{ .IsNullable }}
  // DEBUG: Required: {{ .Required }}
  // DEBUG: AliasedType: {{ if .IsAliased }}{{ .AliasedType }}{{ end }}
  // DEBUG: IsAnonymous: {{ .IsAnonymous }}
  // DEBUG: IsAliased: {{ .IsAliased }}
  // DEBUG: IsBaseType: {{ .IsBaseType }}
  // DEBUG: HasBaseType: {{ .HasBaseType }}
  // DEBUG: IsSubType: {{ .IsSubType }}
  // DEBUG: IsMapNullOverride: {{ .IsMapNullOverride }}
  // DEBUG: ValueExpression: {{ .ValueExpression }}
  // DEBUG: .IsTuple: {{ .IsTuple }}
  {{- if not .IsAnonymous }}
    {{- if or (and .Required .IsNullable) (and .IsBaseType (or .Required .IsNullable)) }}
      // DEBUG: $.IsTuple: {{ $.IsTuple }}
>>>>>>> Temp work
      if err := validate.Required({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{.ValueExpression }}); err != nil {
        return err
      }
    {{ end }}
    {{- if or .IsAliased (ne .ValueExpression .ReceiverName) }}{{/* prevents generated code to call itself: case of aliased types */}}
      {{- if and .IsNullable (not .IsMapNullOverride) }}
      if {{ .ValueExpression }} != nil {
      {{- end }}
      if err := {{.ValueExpression }}.Validate(formats); err != nil {
        if ve, ok := err.(*errors.Validation); ok {
          return ve.ValidateName({{ if .Path }}{{ .Path }}{{ else }}""{{ end }})
        }
        return err
      }
      {{- if and .IsNullable (not .IsMapNullOverride) }}
    }
      {{- end }}
    {{- end }}
  {{- else }}
    {{ range .AllOf }}
      {{ range .Properties }}
        {{ template "propertyvalidator" . }}
      {{ end }}
    {{ end }}
    {{ range .Properties }}
      {{ template "propertyvalidator" . }}
    {{ end }}
  {{- end }}
  {{- if and .IsTuple .AdditionalItems }}
    // TODO: validating additional items should go here, if you see this raise an issue
    // at https://github.com/go-swagger/go-swagger/issues
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======
  breakCompilation = 3
>>>>>>> Temp work
  {{- end }}
{{ end }}

{{define "propertyvalidator" }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
  {{- if .IsPrimitive }}
    {{- if .IsAliased }}
=======
  // DEBUG: PropertyValidator for {{.Name}}
  // DEBUG: .HasValidations: {{ .HasValidations }}
  // DEBUG: .IsMapNullOverride: {{ .IsMapNullOverride }}
  // DEBUG: .IsAliased: {{ .IsAliased }}
  // DEBUG: .Required: {{ .Required }}
  // DEBUG: .IsBaseType: {{ .IsBaseType }}
  // DEBUG: .IsSubType: {{ .IsSubType }}
  // DEBUG: .HasBaseType: {{ .HasBaseType }}
  // DEBUG: .IsAnonymous: {{ .IsAnonymous }}
  // DEBUG: .IsMap: {{ .IsMap }}
  // DEBUG: .IsArray: {{ .IsArray }}
  // DEBUG: .IsPrimitive: {{ .IsPrimitive }}
  // DEBUG: .IsComplexObject: {{ .IsComplexObject }}
  // DEBUG: .IsCustomFormatter: {{ .IsCustomFormatter }}
  // DEBUG: .IsStream: {{ .IsStream }}
  // DEBUG: .IsAdditionalProperties: {{ .IsAdditionalProperties }}
  // DEBUG: .HasAdditionalProperties: {{ .HasAdditionalProperties }}
  {{- if .IsPrimitive }}
    {{- if .IsAliased }}
  // DEBUG: Aliased IsPrimitive
>>>>>>> Temp work
      {{ template "objectvalidator" . }}
    {{- else }}
      {{ template "primitivefieldvalidator" . }}
    {{- end }}
    {{- else if and .IsCustomFormatter (or .HasValidations .Required) }}{{/* custom format not captured as primitive */}}
    {{- if .Required }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======
      // DEBUG: $.IsTuple: {{ $.IsTuple }}
>>>>>>> Temp work
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
    {{- end }}
    {{- if not .IsStream }}
      {{ template "validationCustomformat" . }}
    {{- end }}
  {{- else if .IsArray }}
    {{ template "slicevalidator" . }}
    {{- else if and .IsMap (or (not .IsAliased) (and .IsAliased .IsInterface)) }}{{/* except for interface, the renderinf for aliased maps is performed by objectvalidator */}}
    {{ template "mapvalidator" . }}
  {{- else if or .IsComplexObject .IsTuple .IsAdditionalProperties .IsAliased }}
    {{ template "objectvalidator" . }}
  {{- end }}
{{ end }}

{{ define "fieldvalidator"}}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
  {{- if .IsPrimitive }}
    {{ template "primitivefieldvalidator" . }}
  {{- else if and .IsCustomFormatter (or .HasValidations .Required) }}{{/* custom format not captured as primitive */}}
    {{- if .Required }}
=======
  // DEBUG: fieldvalidator for {{.Name}}
  // DEBUG: .IsAliased: {{ .IsAliased }}
  // DEBUG: .AliasedType: {{ if .IsAliased }}{{.AliasedType}}{{end}}
  // DEBUG: IsBaseType: {{ .IsBaseType }}
  // DEBUG: HasBaseType: {{ .HasBaseType }}
  // DEBUG: IsSubType: {{ .IsSubType }}
  // DEBUG: .IsMap: {{ .IsMap }}
  // DEBUG: .IsArray: {{ .IsArray }}
  // DEBUG: .IsMapNullOverride: {{ .IsMapNullOverride }}
  // DEBUG: .HasValidations: {{ .HasValidations }}
  {{- if .IsPrimitive }}
  // IsPrimitive {{ .IsPrimitive }}
    {{ template "primitivefieldvalidator" . }}
  {{- else if and .IsCustomFormatter (or .HasValidations .Required) }}{{/* custom format not captured as primitive */}}
    {{- if .Required }}
      // DEBUG: $.IsTuple: {{ $.IsTuple }}
>>>>>>> Temp work
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
    {{- end }}
    {{- if not .IsStream }}
      {{ template "validationCustomformat" . }}
    {{- end }}
  {{- else if .IsArray }}
    {{ template "slicevalidator" . }}
  {{- else if .IsMap }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======
    // DEBUG: fieldvalidator with .IsMap
>>>>>>> Temp work
    {{ template "mapvalidator" . }}
  {{- end }}
{{ end }}

{{define "schemavalidator" }}
  {{ if .Enum }}
    {{ if (eq .SwaggerType "string") }}
      {{ $gotype := .GoType }}
const (
      {{ range .Enum }}
  // {{ $gotype }}{{ pascalize . }} captures enum value {{ printf "%q" . }}
	{{ $gotype }}{{ pascalize . }} {{ $gotype }} = {{ printf "%q" . }}
      {{ end }}
)
    {{ end }}

// for schema
var {{ camelize .Name }}Enum []interface{}
func init() {
  var res []{{ template "dereffedSchemaType" . }}
  if err := json.Unmarshal([]byte(`{{ json .Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize .Name }}Enum = append({{ camelize .Name }}Enum, v)
  }
}

func ({{ .ReceiverName }} {{ if not .IsPrimitive }}*{{ end }}{{ if .IsExported }}{{ pascalize .Name }}{{ else }}{{ .Name }}{{ end }}) validate{{ pascalize .Name }}Enum(path, location string, value {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" . }}) error {
  if err := validate.Enum(path, location, value, {{ camelize .Name }}Enum); err != nil {
    return err
  }
  return nil
}
  {{ end }}
  {{ if .ItemsEnum }}
var {{ camelize .Name }}ItemsEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" .Items }}
  if err := json.Unmarshal([]byte(`{{ json .ItemsEnum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize .Name }}ItemsEnum = append({{ camelize .Name }}ItemsEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{  $.Name }}{{ end }}) validate{{ pascalize .Name }}ItemsEnum(path, location string, value {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" .Items }}) error {
  if err := validate.Enum(path, location, value, {{ camelize .Name }}ItemsEnum); err != nil {
    return err
  }
  return nil
}
  {{ end }}
  {{ with .AdditionalProperties }}
    {{ if .Enum }}
// for additional props
var {{ camelize .Name }}ValueEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" . }}
  if err := json.Unmarshal([]byte(`{{ json .Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize .Name }}ValueEnum = append({{ camelize .Name }}ValueEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if .IsExported }}{{ pascalize .Name }}{{ else }}{{ .Name }}{{ end }}) validate{{ pascalize .Name }}ValueEnum(path, location string, value {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" . }}) error {
  if err := validate.Enum(path, location, value, {{ camelize .Name }}ValueEnum); err != nil {
    return err
  }
  return nil
}
    {{- end }}
  {{ end }}
// Validate validates this {{ humanize .Name }}
// DEBUG: IsAliased: {{ .IsAliased }}
// DEBUG: IsBaseType: {{ .IsBaseType }}
// DEBUG: HasBaseType: {{ .HasBaseType }}
// DEBUG: IsExported: {{ .IsExported }}
func ({{.ReceiverName }} {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ if .Discriminates }}{{ camelize .Name }}{{ else if or .IsExported .IsBaseType }}{{ pascalize .Name }}{{ else }}{{ .Name }}{{ end }}) Validate(formats strfmt.Registry) error {
  var res []error

  {{ range .AllOf }}
    {{- if not .Properties }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
      // validation for a type composition with {{ .GoType }}
=======
      // validation for a type composition (AllOf: {{ .Name }}) with {{ .GoType }}
>>>>>>> Temp work
    {{- end }}
    {{- if and (or .IsInterface .IsAnonymous .IsBaseType) (or .Required .HasValidations) }}
      {{ template "fieldvalidator" . }}

      {{ range .Properties }}
        {{ if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
          if err := {{.ReceiverName }}.validate{{ pascalize .Name }}(formats); err != nil {
            res = append(res, err)
          }
        {{- end }}
      {{- end }}
      {{- if and .HasAdditionalProperties (not .IsMap) }}{{/* validates additionalProperties in an object which is not itself a map */}}
        {{ template "mapvalidator" . }}
      {{- end }}
      {{ if and .IsTuple .AdditionalItems }}
      if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}Items(formats); err != nil {
        res = append(res, err)
      }
      {{ end }}
    {{- else if (or .Required .HasValidations) }}
      if err := {{ .ReceiverName }}.{{ pascalize (dropPackage .GoType) }}.Validate(formats); err != nil {
        res = append(res, err)
      }
    {{- end }}
  {{- end }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======

  // DEBUG: fieldvalidator
>>>>>>> Temp work
  {{ template "fieldvalidator" . }}
  {{ range .Properties }}
    // DEBUG: property {{.Name}}
    // DEBUG: HasValidations {{.HasValidations}}
    // DEBUG: IsAliased {{.IsAliased}}
    // DEBUG: IsAnonymous {{.IsAnonymous}}
    // DEBUG: IsBaseType: {{ .IsBaseType }}
    // DEBUG: HasBaseType: {{ .HasBaseType }}
    // DEBUG: IsSubType: {{ .IsSubType }}
    // DEBUG: Required {{.Required}}
    {{ if .AdditionalProperties }}{{ with .AdditionalProperties }}
        // DEBUG: .AdditionalProperties.HasValidations: {{ .HasValidations }}
        // DEBUG: .AdditionalProperties.IsAnonymous: {{ .IsAnonymous }}
        // DEBUG: .AdditionalProperties.IsAliased: {{ .IsAliased }}
        // DEBUG: .AdditionalProperties.IsComplexObject: {{ .IsComplexObject }}
    {{ end }}{{else}}// No AdditionalProperties {{ end }}
    {{ if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
      if err := {{.ReceiverName }}.validate{{ pascalize .Name }}(formats); err != nil {
        res = append(res, err)
      }
    {{ end }}
  {{ end }}
<<<<<<< b10bd7b2c916c12928f64efcfc1391c864b54480
=======
  // DEBUG: check additionalProperties
  // .IsMap: {{ .IsMap }}
>>>>>>> Temp work
  {{- if and .HasAdditionalProperties (not .IsMap) }}{{/* validates additionalProperties in an object which is not itself a map */}}
    {{ template "mapvalidator" . }}
  {{- end }}
  {{ if and .IsTuple .AdditionalItems }}{{/* validates additionalItems in a tuple */}}
    if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}Items(formats); err != nil {
      res = append(res, err)
    }
  {{ end }}
  {{ if and .Enum (not .IsPrimitive) (not .IsMap) }}
    // value enum
    if err := {{ .ReceiverName }}.validate{{ pascalize .Name }}Enum("", "body", {{ .ReceiverName }}); err != nil {
      res = append(res, err)
    }
  {{ end }}

  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}

  {{ range .Properties }}
    {{ if or .Required .HasValidations }}
      {{ if .Enum }}
var {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" . }}
  if err := json.Unmarshal([]byte(`{{ json .Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum = append({{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum, v)
  }
}

        {{ if (eq .SwaggerType "string") }}
          {{ $gotype := .GoType }}
          {{ $propname := .Name }}
const (
          {{ range .Enum }}
  // {{ pascalize $.Name }}{{ pascalize $propname }}{{ pascalize . }} captures enum value {{ printf "%q" . }}
	{{ pascalize $.Name }}{{ pascalize $propname }}{{ pascalize . }} {{ $gotype }} = {{ printf "%q" . }}
          {{ end }}
)
        {{ end }}

// prop value enum
func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}Enum(path, location string, value {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" . }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum); err != nil {
    return err
  }
  return nil
}
      {{ end }}
      {{ if .ItemsEnum }}
var {{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum []interface{}
func init() {
  var res []{{ template "dereffedSchemaType" .Items }}
  if err := json.Unmarshal([]byte(`{{ json .ItemsEnum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum = append({{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}ItemsEnum(path, location string, value {{ if or .Items.IsTuple .Items.IsComplexObject .Items.IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" .Items }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum); err != nil {
    return err
  }
  return nil
}
      {{ end }}
      {{ if .AdditionalItems }}
        {{ if .AdditionalItems.Enum }}
var {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" .AdditionalItems }}
  if err := json.Unmarshal([]byte(`{{ json .AdditionalItems.Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum = append({{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}Enum(path, location string, value {{ if or .AdditionalItems.IsTuple .AdditionalItems.IsComplexObject .AdditionalItems.IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" .AdditionalItems }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum); err != nil {
    return err
  }
  return nil
}
        {{ end }}
      {{ end }}
      {{ with .AdditionalProperties }}
        {{ if .Enum }}
// additional properties value enum
var {{ camelize $.Name }}{{ pascalize .Name }}ValueEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" . }}
  if err := json.Unmarshal([]byte(`{{ json .Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}{{ pascalize .Name }}ValueEnum = append({{ camelize $.Name }}{{ pascalize .Name }}ValueEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}ValueEnum(path, location string, value {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" . }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}{{ pascalize .Name }}ValueEnum); err != nil {
    return err
  }
  return nil
}
        {{ end }}
      {{ end }}

      {{ if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
func ({{.ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}(formats strfmt.Registry) error {
        {{ if not .Required }}
  if swag.IsZero({{ .ValueExpression }}) { // not required
    return nil
  }
        {{ end }}
        {{- if and $.IsTuple .IsMap .Required }}
  if err := validate.Required{{ if and (eq .GoType "string") (not .IsNullable) }}String{{ end }}({{ if .Path }}{{ .Path }}{{ else }}""{{ end }}, {{ printf "%q" .Location }}, {{ if not (or .IsAnonymous .IsNullable) }}{{ .GoType }}({{ end }}{{.ValueExpression }}{{ if not (or .IsAnonymous .IsNullable) }}){{ end }}); err != nil {
    return err
  }
        {{- end }}
        {{template "propertyvalidator" . }}

  return nil
}
      {{ end }}
    {{ end }}
  {{ end }}
  {{ range .AllOf }}
    {{ range .Properties }}
      {{ if and (ne $.DiscriminatorField .Name) (or .Required .HasValidations) }}
        {{ if .Enum }}
var {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" . }}
  if err := json.Unmarshal([]byte(`{{ json .Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum = append({{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum, v)
  }
}

// property enum
func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}Enum(path, location string, value {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" . }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum); err != nil {
    return err
  }
  return nil
}
        {{ end }}
        {{ if .ItemsEnum }}
var {{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" .Items }}
  if err := json.Unmarshal([]byte(`{{ json .ItemsEnum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum = append({{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}ItemsEnum(path, location string, value {{ if or .Items.IsTuple .Items.IsComplexObject .Items.IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" .Items }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}{{ pascalize .Name }}ItemsEnum); err != nil {
    return err
  }
  return nil
}
        {{ end }}
        {{ if .AdditionalItems }}
          {{ if .AdditionalItems.Enum }}
var {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" .AdditionalItems }}
  if err := json.Unmarshal([]byte(`{{ json .AdditionalItems.Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum = append({{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}Enum(path, location string, value {{ if or .AdditionalItems.IsTuple .AdditionalItems.IsComplexObject .AdditionalItems.IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" .AdditionalItems }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}Type{{ pascalize .Name }}PropEnum); err != nil {
    return err
  }
  return nil
}
          {{ end }}
        {{ end }}
        {{ with .AdditionalProperties }}
          {{ if .Enum }}
var {{ camelize $.Name }}{{ pascalize .Name }}ValueEnum []interface{}
func init() {
  var res []{{ template "dereffedSchemaType" . }}
  if err := json.Unmarshal([]byte(`{{ json .Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize $.Name }}{{ pascalize .Name }}ValueEnum = append({{ camelize $.Name }}{{ pascalize .Name }}ValueEnum, v)
  }
}

// additional properties value enum
func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}ValueEnum(path, location string, value {{ if or .IsTuple .IsComplexObject .IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" . }}) error {
  if err := validate.Enum(path, location, value, {{ camelize $.Name }}{{ pascalize .Name }}ValueEnum); err != nil {
    return err
  }
  return nil
}
          {{ end }}
        {{ end }}


func ({{.ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}(formats strfmt.Registry) error {
        {{ if not .Required }}
  if swag.IsZero({{ .ValueExpression }}) { // not required
    return nil
  }
        {{ end }}
        {{template "propertyvalidator" . }}

  return nil
}
      {{ end }}
    {{ end }}
  {{ end }}

  {{ if .HasAdditionalItems }}
    {{ if .AdditionalItems.Enum }}
var {{ camelize .Name }}ItemsEnum []interface{}

func init() {
  var res []{{ template "dereffedSchemaType" .AdditionalItems }}
  if err := json.Unmarshal([]byte(`{{ json .AdditionalItems.Enum }}`), &res); err != nil {
    panic(err)
  }
  for _, v := range res {
    {{ camelize .Name }}ItemsEnum = append({{ camelize .Name }}ItemsEnum, v)
  }
}

func ({{ .ReceiverName }} *{{ if $.Discriminates }}{{ camelize $.Name }}{{ else if $.IsExported }}{{ pascalize $.Name }}{{ else }}{{ $.Name }}{{ end }}) validate{{ pascalize .Name }}ItemsEnum(path, location string, value {{ if or .AdditionalItems.IsTuple .AdditionalItems.IsComplexObject .AdditionalItems.IsAdditionalProperties }}*{{ end }}{{ template "dereffedSchemaType" .AdditionalItems }}) error {
  if err := validate.Enum(path, location, value, {{ camelize .Name }}ItemsEnum); err != nil {
    return err
  }
  return nil
}
    {{ end }}
func ({{.ReceiverName }} *{{ pascalize .Name }}) validate{{ pascalize .Name }}Items(formats strfmt.Registry) error {
    {{ if or .AdditionalItems.Required .AdditionalItems.HasValidations }}
  for {{ .IndexVar }} := range {{ .ValueExpression }}.{{ pascalize .Name }}Items {
      {{template "propertyvalidator" .AdditionalItems }}
  }
    {{ end }}
  return nil
}
  {{ end }}
{{ end }}
