name: Release

permissions:
  contents: read

# TODO: sign release artifacts

on:
  workflow_run:
    workflows:
      - test
    types:
      - completed
    tags:
      - 'v*'
    branches:
      - 'prepare-release/*'
    paths-ignore:
      - 'docs/*'
      - 'hack/hugo/*'
      - .github/workflows/update-doc.yaml

jobs:
  on-success:
    name: Ensure triggering workflow was successful
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "The triggering workflow was successful"

  on-failure:
    name: Triggering workflow was unsuccessful
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "The triggering workflow failed. Stopping here"
          exit 1

  docker-release:
    name: Docker with release tag
    needs: [on-success]
    uses: ./.github/workflows/build-docker.yaml
    with:
      push: true
      tagged: true
      latest: true
      record_retention: 90
    secrets:
      CR_PAT: ${{ secrets.CR_PAT }}
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      QUAY_PASS: ${{ secrets.QUAY_PASS }}

  publish_release:
    # TODO: replace by goreleaser
    name: Publish release
    needs: [on-success]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "stable"
          check-latest: true
          cache: true

      - name: Install Tools
        run: |
          go install github.com/github-release/github-release@latest
          go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest

      - name: Build release
        run: |
          set -x
          rm -rf dist
          mkdir -p dist/bin
          mkdir -p dist/build

          build_binary() {
            LDFLAGS="-s -w -X github.com/$GITHUB_REPOSITORY/cmd/swagger/commands.Commit=${GITHUB_SHA}"
            LDFLAGS="$LDFLAGS -X github.com/$GITHUB_REPOSITORY/cmd/swagger/commands.Version=${GITHUB_REF_NAME-dev}"
            out="swagger_$1_$2"
            if [[ $1 == "windows" ]]; then
              out="${out}.exe"
            fi
            GOOS=$1 GOARCH=$2 CGO_ENABLED=0 go build -ldflags "$LDFLAGS" -o "./dist/bin/$out" ./cmd/swagger
          }

          go mod download

          build_binary linux amd64
          build_binary linux arm64
          build_binary linux arm
          build_binary linux ppc64le
          build_binary linux s390x
          build_binary darwin amd64
          build_binary darwin arm64
          build_binary windows amd64
          build_binary windows arm64

          nfpm p -p deb -t dist/build
          nfpm p -p rpm -t dist/build

          pushd dist/bin || exit 1
          sha1sum * > sha1sum.txt
          sha256sum * > sha256sum.txt
          popd || exit 1

      - name: Push RPM
        if: startsWith(github.ref, 'refs/tags/v')
        id: push_rpm
        uses: cloudsmith-io/action@7af394e0f8add4867bce109385962dafecad1b8d # v0.6.14
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "rpm"
          owner: "go-swagger"
          repo: "go-swagger"
          distro: "fedora"
          release: "any-version"
          file: "dist/build/swagger-*.x86_64.rpm"

      - name: Push Deb
        if: startsWith(github.ref, 'refs/tags/v')
        id: push
        uses: cloudsmith-io/action@7af394e0f8add4867bce109385962dafecad1b8d # v0.6.14
        with:
          api-key: ${{ secrets.CLOUDSMITH_API_KEY }}
          command: "push"
          format: "deb"
          owner: "go-swagger"
          repo: "go-swagger"
          distro: "debian"
          release: "any-version"
          file: "dist/build/swagger_*_amd64.deb"

      - name: Publish Binaries
        if: startsWith(github.ref, 'refs/tags/v')
        uses: fnkr/github-action-ghr@96b1448dc6162f370067e1de51e856e733a76b4f # v1.3
        env:
          GHR_PATH: dist/bin/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
