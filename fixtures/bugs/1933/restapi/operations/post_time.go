// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostTimeHandlerFunc turns a function with the right signature into a post time handler
type PostTimeHandlerFunc func(PostTimeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTimeHandlerFunc) Handle(params PostTimeParams) middleware.Responder {
	return fn(params)
}

// PostTimeHandler interface for that can handle valid post time params
type PostTimeHandler interface {
	Handle(PostTimeParams) middleware.Responder
}

// NewPostTime creates a new http.Handler for the post time operation
func NewPostTime(ctx *middleware.Context, handler PostTimeHandler) *PostTime {
	return &PostTime{Context: ctx, Handler: handler}
}

/*PostTime swagger:route POST /time postTime

PostTime post time API

*/
type PostTime struct {
	Context *middleware.Context
	Handler PostTimeHandler
}

func (o *PostTime) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostTimeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
