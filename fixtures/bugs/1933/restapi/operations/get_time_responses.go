// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/go-swagger/go-swagger/fixtures/bugs/1933/models"
)

// GetTimeOKCode is the HTTP code returned for type GetTimeOK
const GetTimeOKCode int = 200

/*GetTimeOK get time o k

swagger:response getTimeOK
*/
type GetTimeOK struct {

	/*
	  In: Body
	*/
	Payload *models.TimeOfDay `json:"body,omitempty"`
}

// NewGetTimeOK creates GetTimeOK with default headers values
func NewGetTimeOK() *GetTimeOK {

	return &GetTimeOK{}
}

// WithPayload adds the payload to the get time o k response
func (o *GetTimeOK) WithPayload(payload *models.TimeOfDay) *GetTimeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get time o k response
func (o *GetTimeOK) SetPayload(payload *models.TimeOfDay) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTimeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTimeNotFoundCode is the HTTP code returned for type GetTimeNotFound
const GetTimeNotFoundCode int = 404

/*GetTimeNotFound get time not found

swagger:response getTimeNotFound
*/
type GetTimeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetTimeNotFound creates GetTimeNotFound with default headers values
func NewGetTimeNotFound() *GetTimeNotFound {

	return &GetTimeNotFound{}
}

// WithPayload adds the payload to the get time not found response
func (o *GetTimeNotFound) WithPayload(payload *models.NotFound) *GetTimeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get time not found response
func (o *GetTimeNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTimeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
