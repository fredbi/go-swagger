// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/go-swagger/go-swagger/fixtures/bugs/1933/models"
)

// PostTimeOKCode is the HTTP code returned for type PostTimeOK
const PostTimeOKCode int = 200

/*PostTimeOK post time o k

swagger:response postTimeOK
*/
type PostTimeOK struct {

	/*
	  In: Body
	*/
	Payload *models.TimeOfDay `json:"body,omitempty"`
}

// NewPostTimeOK creates PostTimeOK with default headers values
func NewPostTimeOK() *PostTimeOK {

	return &PostTimeOK{}
}

// WithPayload adds the payload to the post time o k response
func (o *PostTimeOK) WithPayload(payload *models.TimeOfDay) *PostTimeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post time o k response
func (o *PostTimeOK) SetPayload(payload *models.TimeOfDay) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTimeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostTimeNotFoundCode is the HTTP code returned for type PostTimeNotFound
const PostTimeNotFoundCode int = 404

/*PostTimeNotFound post time not found

swagger:response postTimeNotFound
*/
type PostTimeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewPostTimeNotFound creates PostTimeNotFound with default headers values
func NewPostTimeNotFound() *PostTimeNotFound {

	return &PostTimeNotFound{}
}

// WithPayload adds the payload to the post time not found response
func (o *PostTimeNotFound) WithPayload(payload *models.NotFound) *PostTimeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post time not found response
func (o *PostTimeNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostTimeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
